name: FarmTech Solutions CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_ml.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Test with pytest
      run: |
        pytest --cov=./ --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-database:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create database
      run: |
        python criar_banco_aprimorado.py
    
    - name: Verify database
      run: |
        python verificar_banco_aprimorado.py
    
    - name: Upload database artifact
      uses: actions/upload-artifact@v3
      with:
        name: farmtech-database
        path: data/farmtech_aprimorado.db

  test-ml-models:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install ML dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_ml.txt
    
    - name: Test ML models
      run: |
        python -c "
        from farmtech_ml_models import MLModels
        import pandas as pd
        
        # Test model loading and predictions
        ml = MLModels()
        
        # Test productivity prediction
        features_prod = pd.DataFrame({
            'area_hectares': [10.0],
            'temperatura_media': [25.0],
            'umidade_media': [60.0],
            'ph_solo': [6.5],
            'nitrogenio': [150.0],
            'fosforo': [80.0],
            'potassio': [200.0]
        })
        
        resultado = ml.predizer_produtividade(features_prod)
        print(f'Produtividade prevista: {resultado}')
        
        # Test irrigation prediction
        features_irr = pd.DataFrame({
            'umidade_solo': [45.0],
            'temperatura': [28.0],
            'umidade_ar': [65.0],
            'precipitacao': [0.0],
            'evaporacao': [5.0],
            'tipo_solo': ['argiloso'],
            'estagio_crescimento': ['vegetativo'],
            'densidade_plantio': [50000.0]
        })
        
        resultado = ml.predizer_irrigacao(features_irr)
        print(f'Recomenda√ß√£o de irriga√ß√£o: {resultado}')
        
        print('‚úÖ Todos os testes de ML passaram!')
        "

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [test, build-database, test-ml-models]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate documentation
      run: |
        # Create docs directory
        mkdir -p docs
        
        # Copy README files
        cp README.md docs/
        cp README_SERIAL_PLOTTER.md docs/
        cp README_ML_STREAMLIT.md docs/
        cp MELHORIAS_IMPLEMENTADAS_FINAL.md docs/
        
        # Generate API documentation
        python -c "
        import os
        import json
        
        # Create API docs
        api_docs = {
            'title': 'FarmTech Solutions API',
            'version': '2.0',
            'description': 'API REST para o sistema FarmTech Solutions',
            'endpoints': {
                'GET /api/health': 'Verificar sa√∫de da API',
                'GET /api/sensores': 'Listar sensores',
                'POST /api/leituras': 'Registrar leitura',
                'GET /api/ml/predizer-produtividade': 'Predizer produtividade',
                'GET /api/alertas': 'Listar alertas'
            }
        }
        
        with open('docs/api.json', 'w') as f:
            json.dump(api_docs, f, indent=2)
        "
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-database, test-ml-models, deploy-docs]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ FarmTech Solutions CI/CD completed successfully!"
        echo "üìä Tests: PASSED"
        echo "üóÑÔ∏è Database: CREATED"
        echo "ü§ñ ML Models: TESTED"
        echo "üìö Documentation: DEPLOYED"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå FarmTech Solutions CI/CD failed!"
        echo "Please check the logs for details." 